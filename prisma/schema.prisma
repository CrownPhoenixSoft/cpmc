// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator zod {
    provider      = "zod-prisma"
    output        = "./zod"
    imports       = "./zod-utils"
    relationModel = "default"
}

model Account {
    id                String  @id @default(cuid())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum IdentityProvider {
    CPMC
    GOOGLE
    FACEBOOK
}

enum UserPermissionRole {
    USER
    ADMIN
}

model User {
    id                   Int                @id @default(autoincrement())
    username             String             @unique
    name                 String?
    email                String             @unique
    phone                String?            @unique @db.VarChar(255)
    emailVerified        DateTime?
    bio                  String?
    avatar               String?
    locale               String?
    password             String             @db.Text
    isSuperAdmin         Boolean            @default(false)
    identityProvider     IdentityProvider   @default(CPMC)
    identityProviderId   String?
    trialEndsAt          DateTime?
    completedOnboarding  Boolean            @default(false)
    away                 Boolean            @default(false)
    twoFactorSecret      String?
    twoFactorEnabled     Boolean            @default(false)
    /// @zod.custom(imports.userMetadata)
    metadata             Json?
    verified             Boolean?           @default(false)
    role                 UserPermissionRole @default(USER)
    disableImpersonation Boolean            @default(false)
    impersonatedUsers    Impersonation[]    @relation("impersonated_user")
    impersonatedBy       Impersonation[]    @relation("impersonated_by_user")
    sessions             Session[]
    accounts             Account[]
    Feedback             Feedback[]
    createdAt            DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Impersonation {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    impersonatedUser   User     @relation("impersonated_user", fields: [impersonatedUserId], references: [id], onDelete: Cascade)
    impersonatedBy     User     @relation("impersonated_by_user", fields: [impersonatedById], references: [id], onDelete: Cascade)
    impersonatedUserId Int
    impersonatedById   Int

    @@index([impersonatedUserId])
    @@index([impersonatedById])
}

model ResetPasswordRequest {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    email     String
    expires   DateTime
}

model Doctor {
    id Int @id @default(autoincrement())

    image    String
    fullName String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Service {
    id Int @id @default(autoincrement())

    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Feedback {
    id      Int      @id @default(autoincrement())
    date    DateTime @default(now())
    userId  Int?
    user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    rating  String
    comment String?

    @@index([userId])
}
